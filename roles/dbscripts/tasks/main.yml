---

- name: install git, rsync and some perl stuff
  pacman: name=git,rsync,perl-dbd-pg,perl-timedate,diffstat state=present

- name: create dbscripts users
  user: name="{{ item }}" shell=/bin/bash
  with_items:
    - git-packages

- name: add cleanup user
  user: name=cleanup groups=tu,dev,multilib shell=/sbin/nologin

- name: add sourceballs user
  user: name=sourceballs shell=/sbin/nologin

- name: create sudoers.d path
  file: path=/etc/sudoers.d state=directory owner=root group=root mode=0600

- name: set up sudoers.d for special users
  copy: src=sudoers.d dest=/etc/sudoers.d/dbscripts owner=root group=root mode=0600

# - name: create ssl cert
#   command: certbot certonly --email morten@linderud.pw --agree-tos --rsa-key-size 4096 --renew-by-default --webroot -w {{letsencrypt_validation_dir}} -d '{{ repos_domain }}' creates='/etc/letsencrypt/live/{{ repos_domain }}/fullchain.pem'

# - name: make nginx log dir
#   file: path=/var/log/nginx/{{ repos_domain }} state=directory owner=root group=root mode=0755

# - name: set up nginx
#   template: src=nginx.d.conf.j2 dest=/etc/nginx/nginx.d/dbscripts.conf owner=root group=root mode=0644
#   notify:
#     - reload nginx
#   tags:
#     - nginx

# - name: put dbscripts.htpasswd in place
#   copy: src=dbscripts.htpasswd dest=/etc/nginx/auth/dbscripts.htpasswd owner=root group=http mode=0640
#   tags:
#     - nginx

- name: create Arch Linux-specific users
  user:
    name: "{{ item.key }}"
    group: users
    groups: "{{ item.value.groups | join(',') }}"
    comment: "{{ item.value.name}}"
    state: present
  with_dict: "{{ arch_users }}"

# - name: configure ssh keys for devs
#   template: src=authorized_keys-group.j2 dest=/home/git-packages/.ssh/authorized_keys owner=git-packages group=git-packages mode=600
#   vars:
#     pubkey_groups: ['dev', 'tu']
#   tags: ['archusers']

- name: create staging directories in user homes
  dbscripts_mkdirs:
    pathtmpl: '/home/{user}/staging/{dirname}'
    permissions: 755
    directories: ['', 'core', 'extra', 'testing', 'staging', 'community', 'community-staging', 'community-testing',  'multilib', 'multilib-staging', 'multilib-testing']
    users: "{{arch_users.keys() | list}}"
    group: users
  tags: ["archusers"]

- name: create dbscripts paths
  file: path="{{ item }}" state=directory
  with_items:
    - /srv/repos/git-packages

- file: path="/srv/repos/git-packages/package-cleanup" state=directory owner=git-packages group=users mode=0775
- acl: name=/srv/repos/git-packages/package-cleanup entry="user:cleanup:rwx" state=present
- acl: name=/srv/repos/git-packages/package-cleanup entry="default:user::rwx" state=present
- acl: name=/srv/repos/git-packages/package-cleanup entry="default:user:cleanup:rwx" state=present
- acl: name=/srv/repos/git-packages/package-cleanup entry="default:group::rwx" state=present
- acl: name=/srv/repos/git-packages/package-cleanup entry="default:other::r-x" state=present

- file: path="/srv/repos/git-packages/source-cleanup" state=directory owner=sourceballs group=git-packages mode=0755

# - file: path="/srv/repos/git-packages/svn" state=directory owner=git-packages group=git-packages mode=0755
# - acl: name=/srv/repos/git-packages/svn entry="default:user::rwx" state=present
# - acl: name=/srv/repos/git-packages/svn entry="default:group::r-x" state=present
# - acl: name=/srv/repos/git-packages/svn entry="default:other::r-x" state=present

- file: path="/srv/repos/git-packages/tmp" state=directory owner=git-packages group=users mode=1775
- acl: name=/srv/repos/git-packages/tmp entry="user:sourceballs:rwx" state=present

- file: path="/srv/ftp/lastsync" state=touch owner=ftp group=ftp mode=0644

- file: path="/srv/ftp/lastupdate" state=touch owner=ftp group=ftp mode=0644
- acl: name=/srv/ftp/lastupdate entry="group:tu:rw-" state=present
- acl: name=/srv/ftp/lastupdate entry="group:dev:rw-" state=present

- name: clone dbscripts git repo
  git: >
    dest=/srv/repos/{{ item }}/dbscripts
    repo=https://github.com/Foxboron/dbscripts.git
    version={{ dbscripts_commit }} update={{ dbscripts_update }}
  with_items:
    - git-packages

- name: symlink /packages to /srv/repos/git-packages/dbscripts
  file: path=/packages src=/srv/repos/git-packages/dbscripts state=link

# - name: put rsyncd.conf into tmpfiles
#   copy: src=rsyncd-tmpfiles.d dest=/etc/tmpfiles.d/rsyncd.conf owner=root group=root mode=0644
#   register: rsyncdtmpfiles

# - name: use tmpfiles.d/rsyncd.conf
#   command: systemd-tmpfiles --create
#   when: rsyncdtmpfiles.changed

# - name: create rsyncd-conf-genscripts
#   file: path=/etc/rsyncd-conf-genscripts state=directory owner=root group=root mode=0700

# - name: install rsync.conf.proto
#   template: src=rsyncd.conf.proto.j2 dest=/etc/rsyncd-conf-genscripts/rsyncd.conf.proto owner=root group=root mode=0644

# - name: configure gen_rsyncd.conf.pl
#   template: src=gen_rsyncd.conf.pl dest=/etc/rsyncd-conf-genscripts/gen_rsyncd.conf.pl owner=root group=root mode=0700
#   no_log: true

# - name: generate mirror config
#   command: /etc/rsyncd-conf-genscripts/gen_rsyncd.conf.pl

- name: install repo helpers
  copy: src={{ item }} dest=/usr/local/bin/{{ item }} owner=root group=root mode=0755
  with_items:
    - lsrepo
    - checklib32

- name: install systemd timers
  copy: src={{ item }} dest=/etc/systemd/system/{{ item }} owner=root group=root mode=0644
  with_items:
    - cleanup.timer
    - cleanup.service
    - sourceballs.timer
    - sourceballs.service
    - lastsync.timer
    - lastsync.service
  notify:
    - daemon reload

- name: activate systemd timers
  service: name={{ item }} enabled=yes state=started
  with_items:
    - cleanup.timer
    - sourceballs.timer
    - lastsync.timer
